-- SQL script to sync auth.users data to profiles table
-- This ensures that display_name from auth.users is automatically synced to profiles table

-- Create or replace the function to handle new user creation
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  -- Insert or update the profiles table with auth data
  INSERT INTO public.profiles (id, display_name, avatar_url, token_count, referral_code, referred_by)
  VALUES (
    NEW.id, 
    COALESCE(NEW.raw_user_meta_data->>'full_name', NEW.raw_user_meta_data->>'name', ''),
    COALESCE(NEW.raw_user_meta_data->>'avatar_url', NEW.raw_user_meta_data->>'picture', ''),
    30, -- Default tokens for new users
    '', -- Will be generated by the application
    NULL -- No referrer initially
  )
  ON CONFLICT (id) 
  DO UPDATE SET
    display_name = COALESCE(NEW.raw_user_meta_data->>'full_name', NEW.raw_user_meta_data->>'name', profiles.display_name),
    avatar_url = COALESCE(NEW.raw_user_meta_data->>'avatar_url', NEW.raw_user_meta_data->>'picture', profiles.avatar_url);
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create or replace the trigger
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT OR UPDATE ON auth.users
  FOR EACH ROW
  EXECUTE FUNCTION public.handle_new_user();

-- Also create a function to sync existing users
CREATE OR REPLACE FUNCTION public.sync_existing_auth_users()
RETURNS void AS $$
BEGIN
  -- Update existing profiles with auth data
  UPDATE public.profiles 
  SET 
    display_name = COALESCE(
      (SELECT raw_user_meta_data->>'full_name' FROM auth.users WHERE auth.users.id = profiles.id),
      (SELECT raw_user_meta_data->>'name' FROM auth.users WHERE auth.users.id = profiles.id),
      profiles.display_name
    ),
    avatar_url = COALESCE(
      (SELECT raw_user_meta_data->>'avatar_url' FROM auth.users WHERE auth.users.id = profiles.id),
      (SELECT raw_user_meta_data->>'picture' FROM auth.users WHERE auth.users.id = profiles.id),
      profiles.avatar_url
    )
  WHERE EXISTS (SELECT 1 FROM auth.users WHERE auth.users.id = profiles.id);
  
  -- Insert missing profiles for existing auth users
  INSERT INTO public.profiles (id, display_name, avatar_url, token_count, referral_code, referred_by)
  SELECT 
    au.id,
    COALESCE(au.raw_user_meta_data->>'full_name', au.raw_user_meta_data->>'name', ''),
    COALESCE(au.raw_user_meta_data->>'avatar_url', au.raw_user_meta_data->>'picture', ''),
    30, -- Default tokens
    '', -- Will be generated by the application
    NULL -- No referrer initially
  FROM auth.users au
  WHERE NOT EXISTS (SELECT 1 FROM public.profiles WHERE profiles.id = au.id);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Run the sync for existing users
SELECT public.sync_existing_auth_users();

-- Grant necessary permissions
GRANT EXECUTE ON FUNCTION public.handle_new_user() TO authenticated;
GRANT EXECUTE ON FUNCTION public.sync_existing_auth_users() TO authenticated;
